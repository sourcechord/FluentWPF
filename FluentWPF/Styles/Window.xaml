<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:SourceChord.FluentWPF"
                    xmlns:animation="clr-namespace:SourceChord.FluentWPF.Animations"
                    xmlns:util="clr-namespace:SourceChord.FluentWPF.Utility">
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <local:IsNullConverter x:Key="IsNullConverter" />
    <local:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter" />

    <Style x:Key="CaptionButtonStyleKey" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="45" />
        <Setter Property="Height" Value="29" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>

    <Style x:Key="GrayCaptionButtonStyleKey" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyleKey}">
        <Setter Property="Background" Value="DarkGray" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border"
                                                         To="0.0" Duration="0:0:0.150">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseIn"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border"
                                                         To="0.6" Duration="0:0:0.150">
                                            <DoubleAnimation.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border"
                                                         To="1" Duration="0:0:0.150">
                                            <DoubleAnimation.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border"
                                                         To="0.0" Duration="0:0:0.150">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseIn"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter"
                                                         To="0.3" Duration="0:0:0.150">
                                            <DoubleAnimation.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border x:Name="border" Background="{TemplateBinding Background}" />
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RedCaptionButtonStyleKey" TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyleKey}">
        <Setter Property="Background" Value="#E81123" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border"
                                                         To="0.0" Duration="0:0:0.150">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseIn"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border"
                                                         To="1" Duration="0:0:0.150">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <animation:BrushAnimation Storyboard.TargetProperty="(TextBlock.Foreground)" Storyboard.TargetName="contentPresenter"
                                                                  To="White" Duration="0:0:0.150" AutoReverse="False">
                                            <animation:BrushAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut"/>
                                            </animation:BrushAnimation.EasingFunction>
                                        </animation:BrushAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border"
                                                         To="0.6" Duration="0:0:0.150">
                                            <DoubleAnimation.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <animation:BrushAnimation Storyboard.TargetProperty="(TextBlock.Foreground)" Storyboard.TargetName="contentPresenter"
                                                                  To="White" Duration="0:0:0.0" AutoReverse="False">
                                            <animation:BrushAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseInOut"/>
                                            </animation:BrushAnimation.EasingFunction>
                                        </animation:BrushAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border"
                                                         To="0.0" Duration="0:0:0.150">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseIn"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter"
                                                         To="0.3" Duration="0:0:0.150">
                                            <DoubleAnimation.EasingFunction>
                                                <ExponentialEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border x:Name="border" Background="{TemplateBinding Background}" />
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          TextBlock.Foreground="{DynamicResource SystemBaseHighColorBrush}"/>
                    </Grid>
                  <ControlTemplate.Triggers>
                        <Trigger Property = "IsMouseOver" Value="False">
                            <Setter Property="TextBlock.Foreground"  TargetName="contentPresenter" Value="{DynamicResource SystemBaseHighColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate TargetType="{x:Type Window}" x:Key="AcrylicWindowTemplate">
        <Border x:Name="windowBorder"
                BorderBrush="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=BorderBrush}"
                BorderThickness="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path= BorderThickness}"
                Background="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=Background}">
            <!-- Title bar area -->
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition />
                </Grid.RowDefinitions>
                <ContentPresenter x:Name="windowContent"
                                  Grid.Row="0" Grid.RowSpan="2"/>
                <ResizeGrip x:Name="resizeGrip" Grid.Row="1"
                            HorizontalAlignment="Right" IsTabStop="False" VerticalAlignment="Bottom" Visibility="Collapsed"/>
                <Grid x:Name="captionGrid" TextBlock.Foreground="{DynamicResource SystemBaseHighColorBrush}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Image x:Name="appIcon"
                           Stretch="UniformToFill"
                           Margin="8,0,0,0"
                           Width="16" Height="16"
                           HorizontalAlignment="Left"
                           VerticalAlignment="Center"
                           Source="{Binding Icon, RelativeSource={RelativeSource AncestorType=Window}, TargetNullValue={x:Static util:IconHelper.AppIcon}}"/>
                    <TextBlock x:Name="captionText"
                               Grid.Column="1"
                               Margin="8,0,0,0"
                               Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                               VerticalAlignment="Center"
                               TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>

                    <ContentControl x:Name="customTitleBar"
                                    Grid.Column="1"
                                    Content="{Binding (local:AcrylicWindow.TitleBar), RelativeSource={RelativeSource AncestorType=Window}}"/>
                    
                    <StackPanel Grid.Column="2"
                                HorizontalAlignment="Right" VerticalAlignment="Top"
                                Orientation="Horizontal"
                                Height="30">
                        <Button x:Name="btnMinimizeButton" Style="{StaticResource GrayCaptionButtonStyleKey}" Command="{x:Static SystemCommands.MinimizeWindowCommand}">
                            <Path Width="10" Height="10" Data="M0,4 L10,4 L10,5 L0,5 z"
                                  Fill="{Binding (TextBlock.Foreground), RelativeSource={RelativeSource AncestorType=Button}}"
                                  RenderTransformOrigin="0.5,0.5" Stretch="Uniform" />
                        </Button>
                        <Button x:Name="btnMaximizeButton" Style="{StaticResource GrayCaptionButtonStyleKey}" Command="{x:Static SystemCommands.MaximizeWindowCommand}">
                            <Path Width="10" Height="10" Data="M1,1 L1,9 L9,9 L9,1 z M0,0 L10,0 L10,10 L0,10 z"
                                  Fill="{Binding (TextBlock.Foreground), RelativeSource={RelativeSource AncestorType=Button}}"
                                  RenderTransformOrigin="0.5,0.5" Stretch="Uniform" />
                        </Button>
                        <Button x:Name="btnRestoreButton" Style="{StaticResource GrayCaptionButtonStyleKey}" Command="{x:Static SystemCommands.RestoreWindowCommand}" Visibility="Collapsed">
                            <Path Width="10" Height="10" Data="M1,3 L1,9 L7,9 L7,3 z M3,1 L3,2 L8,2 L8,7 L9,7 L9,1 z M2,0 L10,0 L10,8 L8,8 L8,10 L0,10 L0,2 L2,2 z"
                                  Fill="{Binding (TextBlock.Foreground), RelativeSource={RelativeSource AncestorType=Button}}"
                                  RenderTransformOrigin="0.5,0.5" Stretch="Uniform" />
                        </Button>
                        <Button x:Name="btnCloseButton" Style="{StaticResource RedCaptionButtonStyleKey}" Command="{x:Static SystemCommands.CloseWindowCommand}">
                            <Path Width="10" Height="10" Data="M0.7,0 L5,4.3 L9.3,0 L10,0.7 L5.7,5 L10,9.3 L9.3,10 L5,5.7 L0.7,10 L0,9.3 L4.3,5 L0,0.7 z"
                                  Fill="{Binding (TextBlock.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                                  RenderTransformOrigin="0.5,0.5" Stretch="Uniform" />
                        </Button>
                    </StackPanel>
                </Grid>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsActive" Value="False">
                <Setter TargetName="windowBorder" Property="Border.BorderBrush" Value="Gray" />
            </Trigger>
            <Trigger Property="WindowState" Value="Maximized">
            </Trigger>

            <Trigger Property="IsActive" Value="False">
                <Setter TargetName="captionGrid" Property="TextBlock.Foreground" Value="Gray" />
            </Trigger>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter TargetName="btnMaximizeButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="btnRestoreButton" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="CanMinimize">
                <Setter TargetName="btnMaximizeButton" Property="IsEnabled" Value="False" />
                <Setter TargetName="btnRestoreButton" Property="IsEnabled" Value="False" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="NoResize">
                <Setter TargetName="btnMinimizeButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="btnMaximizeButton" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="btnRestoreButton" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="local:AcrylicWindow.ExtendViewIntoTitleBar" Value="True">
                <Setter TargetName="captionText" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="appIcon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="local:AcrylicWindow.AcrylicWindowStyle" Value="NoIcon">
                <Setter TargetName="appIcon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="local:AcrylicWindow.TitleBarMode" Value="Extend">
                <Setter TargetName="appIcon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(local:AcrylicWindow.TitleBar), Converter={StaticResource IsNullConverter}}" Value="False">
                <Setter TargetName="captionText" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <Trigger Property="local:AcrylicWindow.TitleBarMode" Value="Extend">
                <Setter TargetName="customTitleBar" Property="Grid.Column" Value="0" />
                <Setter TargetName="customTitleBar" Property="Grid.ColumnSpan" Value="3" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="WindowState" Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="resizeGrip" Property="Visibility" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="AcrylicWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="local:AcrylicWindow.TintColor" Value="{DynamicResource SystemControlAcrylicWindowTintColor}"/>
        <Setter Property="local:AcrylicWindow.FallbackColor" Value="{DynamicResource SystemControlAcrylicWindowFallbackColor}"/>
        <Setter Property="Foreground" Value="{DynamicResource SystemControlAcrylicWindowForegroundBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{Binding Path=(local:AccentColors.ImmersiveSystemAccentBrush)}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid >
                        <!-- Color tint overlay -->
                        <Rectangle x:Name="tintColorLayer"
                                   Fill="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=(local:AcrylicWindow.TintColor), Converter={StaticResource ColorToSolidColorBrushConverter}}"
                                   Opacity="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=(local:AcrylicWindow.TintOpacity)}" />
                        <!-- Tiled noise texture -->
                        <Rectangle x:Name="noiseLayer"
                                       Opacity="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=(local:AcrylicWindow.NoiseOpacity)}">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="/FluentWPF;component/Assets/Images/noise.png"
                                                TileMode="Tile" Stretch="None"
                                                ViewportUnits="Absolute" Viewport="0,0,128,128"/>
                            </Rectangle.Fill>
                        </Rectangle>

                        <!-- Fallback color layer -->
                        <Rectangle x:Name="fallbackLayer" Visibility="Collapsed"
                                   Fill="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=(local:AcrylicWindow.FallbackColor), Converter={StaticResource ColorToSolidColorBrushConverter}}"/>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="{Binding ActualHeight, ElementName=captionGrid, FallbackValue=0}"/>
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <AdornerDecorator x:Name="content"
                                              Grid.Row="1">
                                <ContentControl Content="{Binding}" ClipToBounds="True"/>
                            </AdornerDecorator>
                        </Grid>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
                            <Setter TargetName="tintColorLayer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="noiseLayer" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="fallbackLayer" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding (local:AcrylicWindow.ExtendViewIntoTitleBar), RelativeSource={RelativeSource AncestorType=Window}}" Value="True">
                            <Setter TargetName="content" Property="Grid.Row" Value="0" />
                            <Setter TargetName="content" Property="Grid.RowSpan" Value="2" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="{x:Static SystemParameters.CaptionHeight}"
                      GlassFrameThickness="1" 
                      ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}" UseAeroCaptionButtons="False" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsActive" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource SystemBaseMediumLowColorBrush}" />
            </Trigger>
            <Trigger Property="local:AcrylicWindow.AcrylicWindowStyle" Value="None">
                <Setter Property="WindowChrome.WindowChrome">
                    <Setter.Value>
                        <WindowChrome CaptionHeight="0"
                                      GlassFrameThickness="1" 
                                      ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}" UseAeroCaptionButtons="False" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="local:AcrylicWindow.AcrylicWindowStyle" Value="Normal">
                <Setter Property="Template" Value="{StaticResource AcrylicWindowTemplate}"/>
            </Trigger>
            <Trigger Property="local:AcrylicWindow.AcrylicWindowStyle" Value="NoIcon">
                <Setter Property="Template" Value="{StaticResource AcrylicWindowTemplate}"/>
            </Trigger>
            <Trigger Property="local:AcrylicWindow.AcrylicWindowStyle" Value="None">
            </Trigger>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="BorderThickness" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
